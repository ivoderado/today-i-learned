[{"C:\\Users\\deradoi\\udemy\\Crash Course - Build a Full Stack Web App\\today-i-learned\\src\\index.js":"1","C:\\Users\\deradoi\\udemy\\Crash Course - Build a Full Stack Web App\\today-i-learned\\src\\App.js":"2","C:\\Users\\deradoi\\udemy\\Crash Course - Build a Full Stack Web App\\today-i-learned\\src\\supabase.js":"3"},{"size":232,"mtime":1684246272732,"results":"4","hashOfConfig":"5"},{"size":7583,"mtime":1684353227308,"results":"6","hashOfConfig":"5"},{"size":444,"mtime":1684328151379,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2ym0v",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\deradoi\\udemy\\Crash Course - Build a Full Stack Web App\\today-i-learned\\src\\index.js",[],[],"C:\\Users\\deradoi\\udemy\\Crash Course - Build a Full Stack Web App\\today-i-learned\\src\\App.js",["18"],[],"import { useEffect, useState } from \"react\";\nimport supabase from \"./supabase\";\nimport \"./style.css\";\n\nfunction App() {\n  const [showForm, setShowForm] = useState(false);\n  const [facts, setFacts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentCategory, setCurrentCategory] = useState(\"all\");\n\n  useEffect(\n    function () {\n      async function getFacts() {\n        setIsLoading(true);\n\n        let query = supabase.from(\"facts\").select(\"*\");\n\n        if (currentCategory !== \"all\")\n          query = query.eq(\"category\", currentCategory);\n\n        const { data: facts, error } = await query\n          .order(\"votesInteresting\", { ascending: false })\n          .limit(1000);\n\n        if (!error) setFacts(facts);\n        else alert(\"There was a problem getting data!\");\n        setIsLoading(false);\n      }\n      getFacts();\n    },\n    [currentCategory]\n  );\n\n  return (\n    <>\n      <Header showForm={showForm} setShowForm={setShowForm} />\n      {showForm ? (\n        <NewFactForm setFacts={setFacts} setShowForm={setShowForm} />\n      ) : null}\n\n      <main className=\"main\">\n        <CategoryFilter setCurrentCategory={setCurrentCategory} />\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <FactList facts={facts} setFacts={setFacts} />\n        )}\n      </main>\n    </>\n  );\n}\n\nfunction Loader() {\n  return <p className=\"message\">Loading ...</p>;\n}\n\nfunction Header({ showForm, setShowForm }) {\n  const appTitle = \"Today I Learned\";\n\n  return (\n    <header className=\"header\">\n      <div className=\"logo\">\n        <img src=\"logo.png\" height=\"68\" width=\"68\" alt=\"Today I Learned Logo\" />\n        <h1>{appTitle}</h1>\n      </div>\n\n      <button\n        className=\"btn btn-large btn-open\"\n        onClick={() => setShowForm((show) => !show)}\n      >\n        {showForm ? \"Close\" : \"Share a fact\"}\n      </button>\n    </header>\n  );\n}\n\nconst CATEGORIES = [\n  { name: \"technology\", color: \"#3b82f6\" },\n  { name: \"science\", color: \"#16a34a\" },\n  { name: \"finance\", color: \"#ef4444\" },\n  { name: \"society\", color: \"#eab308\" },\n  { name: \"entertainment\", color: \"#db2777\" },\n  { name: \"health\", color: \"#14b8a6\" },\n  { name: \"history\", color: \"#f97316\" },\n  { name: \"news\", color: \"#8b5cf6\" },\n];\n\nfunction isValidHttpUrl(string) {\n  let url;\n\n  try {\n    url = new URL(string);\n  } catch (_) {\n    return false;\n  }\n\n  return url.protocol === \"http:\" || url.protocol === \"https:\";\n}\n\nfunction NewFactForm({ setFacts, setShowForm }) {\n  const [text, setText] = useState(\"\");\n  const [source, setSource] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const textLength = text.length;\n\n  async function handleSubmit(e) {\n    // 1. Prevent browser reload\n    e.preventDefault();\n    console.log(text, source, category);\n\n    // 2. Check if data is valid and if so, create a new fact\n    if (\n      text &&\n      source &&\n      category &&\n      textLength <= 200 &&\n      isValidHttpUrl(source)\n    )\n      //{\n      // 3. Create a new fact\n      // const newFact = {\n      //   id: Math.round(Math.random() * 10000000),\n      //   text,\n      //   source,\n      //   category,\n      //   votesInteresting: 0,\n      //   votesMindblowing: 0,\n      //   votesFalse: 0,\n      //   createdIn: new Date().getFullYear(),\n      // };\n\n      // 3. Upload fact to Supabase and receive the new fact object\n      setIsUploading(true);\n    const { data: newFact, error } = await supabase\n      .from(\"facts\")\n      .insert([{ text, source, category }])\n      .select();\n    setIsUploading(false);\n\n    // 4. Add the new fact to the UI: add the fact to state\n    if (!error) setFacts((facts) => [newFact[0], ...facts]);\n\n    // 5. Reset input fields\n    setText(\"\");\n    setSource(\"\");\n    setCategory(\"\");\n\n    // 6. Close the form\n    setShowForm(false);\n  }\n\n  return (\n    <form className=\"fact-form\" onSubmitCapture={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Share a fact with the world...\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <span>{200 - textLength}</span>\n      <input\n        value={source}\n        type=\"text\"\n        placeholder=\"Thrustworthy source ...\"\n        onChange={(e) => setSource(e.target.value)}\n        disable={isUploading}\n      />\n      <select\n        value={category}\n        onChange={(e) => setCategory(e.target.value)}\n        disable={isUploading}\n      >\n        <option value=\"\">Choose category:</option>\n        {CATEGORIES.map((cat) => (\n          <option key={cat.name} value={cat.name}>\n            {\" \"}\n            {cat.name.toUpperCase()}\n          </option>\n        ))}\n      </select>\n      <button className=\"btn btn-large\" disable={isUploading}>\n        Post\n      </button>\n    </form>\n  );\n}\n\nfunction CategoryFilter({ setCurrentCategory }) {\n  return (\n    <aside>\n      <ul>\n        <li className=\"category\">\n          <button\n            className=\"btn btn-all-categories\"\n            onClick={() => setCurrentCategory(\"all\")}\n          >\n            All\n          </button>\n        </li>\n        {CATEGORIES.map((cat) => (\n          <li key={cat.name} className=\"category\">\n            <button\n              className=\"btn btn-category\"\n              style={{ backgroundColor: cat.color }}\n              onClick={() => setCurrentCategory(cat.name)}\n            >\n              {cat.name}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </aside>\n  );\n}\n\nfunction FactList({ facts, setFacts }) {\n  if (facts.length === 0) {\n    return (\n      <p className=\"message\">\n        No facts for this category yet! Create the first one ‚úå\n      </p>\n    );\n  }\n\n  return (\n    <section>\n      <ul className=\"facts-list\">\n        {facts.map((fact) => (\n          <Fact key={fact.id} fact={fact} setFacts={setFacts} />\n        ))}\n      </ul>\n      <p> There are {facts.length} facts in the database.</p>\n    </section>\n  );\n}\n\nfunction Fact({ fact, setFacts }) {\n  const [isUpdating, setIsUpdating] = useState(false);\n  const isDisputed =\n    fact.votesInteresting + fact.votesMindblowing < fact.votesFalse;\n\n  async function handleVote(columnName) {\n    const { data: updatedFact, error } = await supabase\n      .from(\"facts\")\n      .update({ [columnName]: fact[columnName] + 1 })\n      .eq(\"id\", fact.id)\n      .select();\n\n    setIsUpdating(false);\n    console.log(updatedFact);\n    if (!error)\n      setFacts((facts) =>\n        facts.map((f) => (f.id === fact.id ? updatedFact[0] : f))\n      );\n  }\n\n  return (\n    <li className=\"fact\">\n      <p>\n        {isDisputed ? <span className=\"disputed\"> [‚õîDISPUTED]</span> : null}\n        {fact.text}\n        <a className=\"source\" href={fact.source} target=\"_blank\">\n          (Source)\n        </a>\n      </p>\n      <span\n        className=\"tag\"\n        style={{\n          backgroundColor: CATEGORIES.find((cat) => cat.name === fact.category)\n            .color,\n        }}\n      >\n        {fact.category}\n      </span>\n      <div className=\"vote-buttons\">\n        <button\n          onClick={() => handleVote(\"votesInteresting\")}\n          disabled={isUpdating}\n        >\n          üëç {fact.votesInteresting}\n        </button>\n        <button\n          onClick={() => handleVote(\"votesMindblowing\")}\n          disabled={isUpdating}\n        >\n          ü§Ø {fact.votesMindblowing}\n        </button>\n        <button onClick={() => handleVote(\"votesFalse\")} disabled={isUpdating}>\n          ‚õîÔ∏è {fact.votesFalse}\n        </button>\n      </div>\n    </li>\n  );\n}\n\nexport default App;\n","C:\\Users\\deradoi\\udemy\\Crash Course - Build a Full Stack Web App\\today-i-learned\\src\\supabase.js",[],[],{"ruleId":"19","severity":1,"message":"20","line":263,"column":9,"nodeType":"21","messageId":"22","endLine":263,"endColumn":66,"fix":"23"},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"24","text":"25"},[6759,6759]," rel=\"noreferrer\""]