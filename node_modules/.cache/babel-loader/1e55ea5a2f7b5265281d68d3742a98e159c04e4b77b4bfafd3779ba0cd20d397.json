{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/deradoi/udemy/Crash Course - Build a Full Stack Web App/today-i-learned/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/deradoi/udemy/Crash Course - Build a Full Stack Web App/today-i-learned/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/deradoi/udemy/Crash Course - Build a Full Stack Web App/today-i-learned/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { isStorageError, StorageError } from '../lib/errors';\nimport { get, post, remove as _remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nvar DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nvar DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nvar StorageFileApi = /*#__PURE__*/function () {\n  function StorageFileApi(url) {\n    var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var bucketId = arguments.length > 2 ? arguments[2] : undefined;\n    var fetch = arguments.length > 3 ? arguments[3] : undefined;\n    _classCallCheck(this, StorageFileApi);\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  _createClass(StorageFileApi, [{\n    key: \"uploadOrUpdate\",\n    value: function uploadOrUpdate(method, path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var body, options, headers, cleanPath, _path, res, error;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n              headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n                'x-upsert': String(options.upsert)\n              });\n              if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                body = new FormData();\n                body.append('cacheControl', options.cacheControl);\n                body.append('', fileBody);\n              } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                body = fileBody;\n                body.append('cacheControl', options.cacheControl);\n              } else {\n                body = fileBody;\n                headers['cache-control'] = \"max-age=\".concat(options.cacheControl);\n                headers['content-type'] = options.contentType;\n              }\n              cleanPath = this._removeEmptyFolders(path);\n              _path = this._getFinalPath(cleanPath);\n              _context.next = 8;\n              return this.fetch(\"\".concat(this.url, \"/object/\").concat(_path), Object.assign({\n                method: method,\n                body: body,\n                headers: headers\n              }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n                duplex: options.duplex\n              } : {}));\n            case 8:\n              res = _context.sent;\n              if (!res.ok) {\n                _context.next = 13;\n                break;\n              }\n              return _context.abrupt(\"return\", {\n                data: {\n                  path: cleanPath\n                },\n                error: null\n              });\n            case 13:\n              _context.next = 15;\n              return res.json();\n            case 15:\n              error = _context.sent;\n              return _context.abrupt(\"return\", {\n                data: null,\n                error: error\n              });\n            case 17:\n              _context.next = 24;\n              break;\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](0);\n              if (!isStorageError(_context.t0)) {\n                _context.next = 23;\n                break;\n              }\n              return _context.abrupt(\"return\", {\n                data: null,\n                error: _context.t0\n              });\n            case 23:\n              throw _context.t0;\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 19]]);\n      }));\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n  }, {\n    key: \"upload\",\n    value: function upload(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this.uploadOrUpdate('POST', path, fileBody, fileOptions));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Upload a file with a token generated from `createSignedUploadUrl`.\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param token The token generated from `createSignedUploadUrl`\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n  }, {\n    key: \"uploadToSignedUrl\",\n    value: function uploadToSignedUrl(path, token, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var cleanPath, _path, url, body, options, headers, res, error;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              cleanPath = this._removeEmptyFolders(path);\n              _path = this._getFinalPath(cleanPath);\n              url = new URL(this.url + \"/object/upload/sign/\".concat(_path));\n              url.searchParams.set('token', token);\n              _context3.prev = 4;\n              options = Object.assign({\n                upsert: DEFAULT_FILE_OPTIONS.upsert\n              }, fileOptions);\n              headers = Object.assign(Object.assign({}, this.headers), {\n                'x-upsert': String(options.upsert)\n              });\n              if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                body = new FormData();\n                body.append('cacheControl', options.cacheControl);\n                body.append('', fileBody);\n              } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                body = fileBody;\n                body.append('cacheControl', options.cacheControl);\n              } else {\n                body = fileBody;\n                headers['cache-control'] = \"max-age=\".concat(options.cacheControl);\n                headers['content-type'] = options.contentType;\n              }\n              _context3.next = 10;\n              return this.fetch(url.toString(), {\n                method: 'PUT',\n                body: body,\n                headers: headers\n              });\n            case 10:\n              res = _context3.sent;\n              if (!res.ok) {\n                _context3.next = 15;\n                break;\n              }\n              return _context3.abrupt(\"return\", {\n                data: {\n                  path: cleanPath\n                },\n                error: null\n              });\n            case 15:\n              _context3.next = 17;\n              return res.json();\n            case 17:\n              error = _context3.sent;\n              return _context3.abrupt(\"return\", {\n                data: null,\n                error: error\n              });\n            case 19:\n              _context3.next = 26;\n              break;\n            case 21:\n              _context3.prev = 21;\n              _context3.t0 = _context3[\"catch\"](4);\n              if (!isStorageError(_context3.t0)) {\n                _context3.next = 25;\n                break;\n              }\n              return _context3.abrupt(\"return\", {\n                data: null,\n                error: _context3.t0\n              });\n            case 25:\n              throw _context3.t0;\n            case 26:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[4, 21]]);\n      }));\n    }\n    /**\n     * Creates a signed upload URL.\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\n     * They are valid for one minute.\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     */\n  }, {\n    key: \"createSignedUploadUrl\",\n    value: function createSignedUploadUrl(path) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _path, data, url, token;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _path = this._getFinalPath(path);\n              _context4.next = 4;\n              return post(this.fetch, \"\".concat(this.url, \"/object/upload/sign/\").concat(_path), {}, {\n                headers: this.headers\n              });\n            case 4:\n              data = _context4.sent;\n              url = new URL(this.url + data.url);\n              token = url.searchParams.get('token');\n              if (token) {\n                _context4.next = 9;\n                break;\n              }\n              throw new StorageError('No token returned by API');\n            case 9:\n              return _context4.abrupt(\"return\", {\n                data: {\n                  signedUrl: url.toString(),\n                  path: path,\n                  token: token\n                },\n                error: null\n              });\n            case 12:\n              _context4.prev = 12;\n              _context4.t0 = _context4[\"catch\"](0);\n              if (!isStorageError(_context4.t0)) {\n                _context4.next = 16;\n                break;\n              }\n              return _context4.abrupt(\"return\", {\n                data: null,\n                error: _context4.t0\n              });\n            case 16:\n              throw _context4.t0;\n            case 17:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[0, 12]]);\n      }));\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n  }, {\n    key: \"update\",\n    value: function update(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", this.uploadOrUpdate('PUT', path, fileBody, fileOptions));\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     */\n  }, {\n    key: \"move\",\n    value: function move(fromPath, toPath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return post(this.fetch, \"\".concat(this.url, \"/object/move\"), {\n                bucketId: this.bucketId,\n                sourceKey: fromPath,\n                destinationKey: toPath\n              }, {\n                headers: this.headers\n              });\n            case 3:\n              data = _context6.sent;\n              return _context6.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 7:\n              _context6.prev = 7;\n              _context6.t0 = _context6[\"catch\"](0);\n              if (!isStorageError(_context6.t0)) {\n                _context6.next = 11;\n                break;\n              }\n              return _context6.abrupt(\"return\", {\n                data: null,\n                error: _context6.t0\n              });\n            case 11:\n              throw _context6.t0;\n            case 12:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     */\n  }, {\n    key: \"copy\",\n    value: function copy(fromPath, toPath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return post(this.fetch, \"\".concat(this.url, \"/object/copy\"), {\n                bucketId: this.bucketId,\n                sourceKey: fromPath,\n                destinationKey: toPath\n              }, {\n                headers: this.headers\n              });\n            case 3:\n              data = _context7.sent;\n              return _context7.abrupt(\"return\", {\n                data: {\n                  path: data.Key\n                },\n                error: null\n              });\n            case 7:\n              _context7.prev = 7;\n              _context7.t0 = _context7[\"catch\"](0);\n              if (!isStorageError(_context7.t0)) {\n                _context7.next = 11;\n                break;\n              }\n              return _context7.abrupt(\"return\", {\n                data: null,\n                error: _context7.t0\n              });\n            case 11:\n              throw _context7.t0;\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n  }, {\n    key: \"createSignedUrl\",\n    value: function createSignedUrl(path, expiresIn, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var _path, data, downloadQueryParam, signedUrl;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.prev = 0;\n              _path = this._getFinalPath(path);\n              _context8.next = 4;\n              return post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(_path), Object.assign({\n                expiresIn: expiresIn\n              }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n                transform: options.transform\n              } : {}), {\n                headers: this.headers\n              });\n            case 4:\n              data = _context8.sent;\n              downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"&download=\".concat(options.download === true ? '' : options.download) : '';\n              signedUrl = encodeURI(\"\".concat(this.url).concat(data.signedURL).concat(downloadQueryParam));\n              data = {\n                signedUrl: signedUrl\n              };\n              return _context8.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 11:\n              _context8.prev = 11;\n              _context8.t0 = _context8[\"catch\"](0);\n              if (!isStorageError(_context8.t0)) {\n                _context8.next = 15;\n                break;\n              }\n              return _context8.abrupt(\"return\", {\n                data: null,\n                error: _context8.t0\n              });\n            case 15:\n              throw _context8.t0;\n            case 16:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this, [[0, 11]]);\n      }));\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n  }, {\n    key: \"createSignedUrls\",\n    value: function createSignedUrls(paths, expiresIn, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _this = this;\n        var data, downloadQueryParam;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              _context9.next = 3;\n              return post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(this.bucketId), {\n                expiresIn: expiresIn,\n                paths: paths\n              }, {\n                headers: this.headers\n              });\n            case 3:\n              data = _context9.sent;\n              downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"&download=\".concat(options.download === true ? '' : options.download) : '';\n              return _context9.abrupt(\"return\", {\n                data: data.map(function (datum) {\n                  return Object.assign(Object.assign({}, datum), {\n                    signedUrl: datum.signedURL ? encodeURI(\"\".concat(_this.url).concat(datum.signedURL).concat(downloadQueryParam)) : null\n                  });\n                }),\n                error: null\n              });\n            case 8:\n              _context9.prev = 8;\n              _context9.t0 = _context9[\"catch\"](0);\n              if (!isStorageError(_context9.t0)) {\n                _context9.next = 12;\n                break;\n              }\n              return _context9.abrupt(\"return\", {\n                data: null,\n                error: _context9.t0\n              });\n            case 12:\n              throw _context9.t0;\n            case 13:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[0, 8]]);\n      }));\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n  }, {\n    key: \"download\",\n    value: function download(path, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var wantsTransformation, renderPath, transformationQuery, queryString, _path, res, data;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n              renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n              transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n              queryString = transformationQuery ? \"?\".concat(transformationQuery) : '';\n              _context10.prev = 4;\n              _path = this._getFinalPath(path);\n              _context10.next = 8;\n              return get(this.fetch, \"\".concat(this.url, \"/\").concat(renderPath, \"/\").concat(_path).concat(queryString), {\n                headers: this.headers,\n                noResolveJson: true\n              });\n            case 8:\n              res = _context10.sent;\n              _context10.next = 11;\n              return res.blob();\n            case 11:\n              data = _context10.sent;\n              return _context10.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 15:\n              _context10.prev = 15;\n              _context10.t0 = _context10[\"catch\"](4);\n              if (!isStorageError(_context10.t0)) {\n                _context10.next = 19;\n                break;\n              }\n              return _context10.abrupt(\"return\", {\n                data: null,\n                error: _context10.t0\n              });\n            case 19:\n              throw _context10.t0;\n            case 20:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this, [[4, 15]]);\n      }));\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n  }, {\n    key: \"getPublicUrl\",\n    value: function getPublicUrl(path, options) {\n      var _path = this._getFinalPath(path);\n      var _queryString = [];\n      var downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"download=\".concat(options.download === true ? '' : options.download) : '';\n      if (downloadQueryParam !== '') {\n        _queryString.push(downloadQueryParam);\n      }\n      var wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      var renderPath = wantsTransformation ? 'render/image' : 'object';\n      var transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      if (transformationQuery !== '') {\n        _queryString.push(transformationQuery);\n      }\n      var queryString = _queryString.join('&');\n      if (queryString !== '') {\n        queryString = \"?\".concat(queryString);\n      }\n      return {\n        data: {\n          publicUrl: encodeURI(\"\".concat(this.url, \"/\").concat(renderPath, \"/public/\").concat(_path).concat(queryString))\n        }\n      };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(paths) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.prev = 0;\n              _context11.next = 3;\n              return _remove(this.fetch, \"\".concat(this.url, \"/object/\").concat(this.bucketId), {\n                prefixes: paths\n              }, {\n                headers: this.headers\n              });\n            case 3:\n              data = _context11.sent;\n              return _context11.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 7:\n              _context11.prev = 7;\n              _context11.t0 = _context11[\"catch\"](0);\n              if (!isStorageError(_context11.t0)) {\n                _context11.next = 11;\n                break;\n              }\n              return _context11.abrupt(\"return\", {\n                data: null,\n                error: _context11.t0\n              });\n            case 11:\n              throw _context11.t0;\n            case 12:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     */\n  }, {\n    key: \"list\",\n    value: function list(path, options, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var body, data;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.prev = 0;\n              body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n                prefix: path || ''\n              });\n              _context12.next = 4;\n              return post(this.fetch, \"\".concat(this.url, \"/object/list/\").concat(this.bucketId), body, {\n                headers: this.headers\n              }, parameters);\n            case 4:\n              data = _context12.sent;\n              return _context12.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 8:\n              _context12.prev = 8;\n              _context12.t0 = _context12[\"catch\"](0);\n              if (!isStorageError(_context12.t0)) {\n                _context12.next = 12;\n                break;\n              }\n              return _context12.abrupt(\"return\", {\n                data: null,\n                error: _context12.t0\n              });\n            case 12:\n              throw _context12.t0;\n            case 13:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this, [[0, 8]]);\n      }));\n    }\n  }, {\n    key: \"_getFinalPath\",\n    value: function _getFinalPath(path) {\n      return \"\".concat(this.bucketId, \"/\").concat(path);\n    }\n  }, {\n    key: \"_removeEmptyFolders\",\n    value: function _removeEmptyFolders(path) {\n      return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n  }, {\n    key: \"transformOptsToQueryString\",\n    value: function transformOptsToQueryString(transform) {\n      var params = [];\n      if (transform.width) {\n        params.push(\"width=\".concat(transform.width));\n      }\n      if (transform.height) {\n        params.push(\"height=\".concat(transform.height));\n      }\n      if (transform.resize) {\n        params.push(\"resize=\".concat(transform.resize));\n      }\n      if (transform.format) {\n        params.push(\"format=\".concat(transform.format));\n      }\n      if (transform.quality) {\n        params.push(\"quality=\".concat(transform.quality));\n      }\n      return params.join('&');\n    }\n  }]);\n  return StorageFileApi;\n}();\nexport { StorageFileApi as default };","map":{"version":3,"names":["isStorageError","StorageError","get","post","remove","resolveFetch","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","url","headers","arguments","length","undefined","bucketId","fetch","_classCallCheck","_createClass","key","value","uploadOrUpdate","method","path","fileBody","fileOptions","options","Object","assign","String","Blob","body","FormData","append","concat","cleanPath","_removeEmptyFolders","_path","_getFinalPath","_context","next","duplex","res","sent","ok","abrupt","data","error","json","prev","t0","stop","_callee","upload","_context2","_callee2","uploadToSignedUrl","token","URL","searchParams","set","_context3","toString","_callee3","createSignedUploadUrl","_context4","signedUrl","_callee4","update","_context5","_callee5","move","fromPath","toPath","sourceKey","destinationKey","_context6","_callee6","copy","_context7","Key","_callee7","createSignedUrl","expiresIn","_context8","transform","downloadQueryParam","download","encodeURI","signedURL","_callee8","createSignedUrls","paths","_context9","map","datum","_this","_callee9","wantsTransformation","renderPath","transformationQuery","transformOptsToQueryString","queryString","_context10","noResolveJson","blob","_callee10","getPublicUrl","_queryString","push","join","publicUrl","prefixes","_context11","_callee11","list","parameters","prefix","_context12","_callee12","replace","params","width","height","resize","format","quality","default"],"sources":["C:\\Users\\deradoi\\udemy\\Crash Course - Build a Full Stack Web App\\today-i-learned\\node_modules\\@supabase\\storage-js\\src\\packages\\StorageFileApi.ts"],"sourcesContent":["import { isStorageError, StorageError } from '../lib/errors'\nimport { Fetch, get, post, remove } from '../lib/fetch'\nimport { resolveFetch } from '../lib/helpers'\nimport {\n  FileObject,\n  FileOptions,\n  SearchOptions,\n  FetchParameters,\n  TransformOptions,\n} from '../lib/types'\n\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc',\n  },\n}\n\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false,\n}\n\ntype FileBody =\n  | ArrayBuffer\n  | ArrayBufferView\n  | Blob\n  | Buffer\n  | File\n  | FormData\n  | NodeJS.ReadableStream\n  | ReadableStream<Uint8Array>\n  | URLSearchParams\n  | string\n\nexport default class StorageFileApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected bucketId?: string\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    bucketId?: string,\n    fetch?: Fetch\n  ) {\n    this.url = url\n    this.headers = headers\n    this.bucketId = bucketId\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  private async uploadOrUpdate(\n    method: 'POST' | 'PUT',\n    path: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let body\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const cleanPath = this._removeEmptyFolders(path)\n      const _path = this._getFinalPath(cleanPath)\n      const res = await this.fetch(`${this.url}/object/${_path}`, {\n        method,\n        body: body as BodyInit,\n        headers,\n        ...(options?.duplex ? { duplex: options.duplex } : {}),\n      })\n\n      if (res.ok) {\n        return {\n          data: { path: cleanPath },\n          error: null,\n        }\n      } else {\n        const error = await res.json()\n        return { data: null, error }\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async upload(\n    path: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Upload a file with a token generated from `createSignedUploadUrl`.\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param token The token generated from `createSignedUploadUrl`\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async uploadToSignedUrl(\n    path: string,\n    token: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ) {\n    const cleanPath = this._removeEmptyFolders(path)\n    const _path = this._getFinalPath(cleanPath)\n\n    const url = new URL(this.url + `/object/upload/sign/${_path}`)\n    url.searchParams.set('token', token)\n\n    try {\n      let body\n      const options = { upsert: DEFAULT_FILE_OPTIONS.upsert, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...{ 'x-upsert': String(options.upsert as boolean) },\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const res = await this.fetch(url.toString(), {\n        method: 'PUT',\n        body: body as BodyInit,\n        headers,\n      })\n\n      if (res.ok) {\n        return {\n          data: { path: cleanPath },\n          error: null,\n        }\n      } else {\n        const error = await res.json()\n        return { data: null, error }\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a signed upload URL.\n   * Signed upload URLs can be used to upload files to the bucket without further authentication.\n   * They are valid for one minute.\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   */\n  async createSignedUploadUrl(\n    path: string\n  ): Promise<\n    | {\n        data: { signedUrl: string; token: string; path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let _path = this._getFinalPath(path)\n\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/upload/sign/${_path}`,\n        {},\n        { headers: this.headers }\n      )\n\n      const url = new URL(this.url + data.url)\n\n      const token = url.searchParams.get('token')\n\n      if (!token) {\n        throw new StorageError('No token returned by API')\n      }\n\n      return { data: { signedUrl: url.toString(), path, token }, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async update(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Moves an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   */\n  async move(\n    fromPath: string,\n    toPath: string\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/move`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Copies an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n  async copy(\n    fromPath: string,\n    toPath: string\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/copy`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data: { path: data.Key }, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  async createSignedUrl(\n    path: string,\n    expiresIn: number,\n    options?: { download?: string | boolean; transform?: TransformOptions }\n  ): Promise<\n    | {\n        data: { signedUrl: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let _path = this._getFinalPath(path)\n\n      let data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${_path}`,\n        { expiresIn, ...(options?.transform ? { transform: options.transform } : {}) },\n        { headers: this.headers }\n      )\n      const downloadQueryParam = options?.download\n        ? `&download=${options.download === true ? '' : options.download}`\n        : ''\n      const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`)\n      data = { signedUrl }\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   */\n  async createSignedUrls(\n    paths: string[],\n    expiresIn: number,\n    options?: { download: string | boolean }\n  ): Promise<\n    | {\n        data: { error: string | null; path: string | null; signedUrl: string }[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${this.bucketId}`,\n        { expiresIn, paths },\n        { headers: this.headers }\n      )\n\n      const downloadQueryParam = options?.download\n        ? `&download=${options.download === true ? '' : options.download}`\n        : ''\n      return {\n        data: data.map((datum: { signedURL: string }) => ({\n          ...datum,\n          signedUrl: datum.signedURL\n            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n            : null,\n        })),\n        error: null,\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n   *\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  async download(\n    path: string,\n    options?: { transform?: TransformOptions }\n  ): Promise<\n    | {\n        data: Blob\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    const wantsTransformation = typeof options?.transform !== 'undefined'\n    const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object'\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\n    const queryString = transformationQuery ? `?${transformationQuery}` : ''\n\n    try {\n      const _path = this._getFinalPath(path)\n      const res = await get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n        headers: this.headers,\n        noResolveJson: true,\n      })\n      const data = await res.blob()\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n   *\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  getPublicUrl(\n    path: string,\n    options?: { download?: string | boolean; transform?: TransformOptions }\n  ): { data: { publicUrl: string } } {\n    const _path = this._getFinalPath(path)\n    const _queryString = []\n\n    const downloadQueryParam = options?.download\n      ? `download=${options.download === true ? '' : options.download}`\n      : ''\n\n    if (downloadQueryParam !== '') {\n      _queryString.push(downloadQueryParam)\n    }\n\n    const wantsTransformation = typeof options?.transform !== 'undefined'\n    const renderPath = wantsTransformation ? 'render/image' : 'object'\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\n\n    if (transformationQuery !== '') {\n      _queryString.push(transformationQuery)\n    }\n\n    let queryString = _queryString.join('&')\n    if (queryString !== '') {\n      queryString = `?${queryString}`\n    }\n\n    return {\n      data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n    }\n  }\n\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n   */\n  async remove(\n    paths: string[]\n  ): Promise<\n    | {\n        data: FileObject[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/object/${this.bucketId}`,\n        { prefixes: paths },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(\n  //   id: string\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await post(\n  //       this.fetch,\n  //       `${this.url}/metadata/${id}`,\n  //       { ...meta },\n  //       { headers: this.headers }\n  //     )\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   */\n  async list(\n    path?: string,\n    options?: SearchOptions,\n    parameters?: FetchParameters\n  ): Promise<\n    | {\n        data: FileObject[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/list/${this.bucketId}`,\n        body,\n        { headers: this.headers },\n        parameters\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  private _getFinalPath(path: string) {\n    return `${this.bucketId}/${path}`\n  }\n\n  private _removeEmptyFolders(path: string) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\n  }\n\n  private transformOptsToQueryString(transform: TransformOptions) {\n    const params = []\n    if (transform.width) {\n      params.push(`width=${transform.width}`)\n    }\n\n    if (transform.height) {\n      params.push(`height=${transform.height}`)\n    }\n\n    if (transform.resize) {\n      params.push(`resize=${transform.resize}`)\n    }\n\n    if (transform.format) {\n      params.push(`format=${transform.format}`)\n    }\n\n    if (transform.quality) {\n      params.push(`quality=${transform.quality}`)\n    }\n\n    return params.join('&')\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}