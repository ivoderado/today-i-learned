{"ast":null,"code":"import _classCallCheck from \"C:/Users/deradoi/udemy/Crash Course - Build a Full Stack Web App/today-i-learned/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/deradoi/udemy/Crash Course - Build a Full Stack Web App/today-i-learned/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nvar Timer = /*#__PURE__*/function () {\n  function Timer(callback, timerCalc) {\n    _classCallCheck(this, Timer);\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n    this.timer = undefined;\n    this.tries = 0;\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n  }\n  _createClass(Timer, [{\n    key: \"reset\",\n    value: function reset() {\n      this.tries = 0;\n      clearTimeout(this.timer);\n    }\n    // Cancels any previous scheduleTimeout and schedules callback\n  }, {\n    key: \"scheduleTimeout\",\n    value: function scheduleTimeout() {\n      var _this = this;\n      clearTimeout(this.timer);\n      this.timer = setTimeout(function () {\n        _this.tries = _this.tries + 1;\n        _this.callback();\n      }, this.timerCalc(this.tries + 1));\n    }\n  }]);\n  return Timer;\n}();\nexport { Timer as default };","map":{"version":3,"names":["Timer","callback","timerCalc","_classCallCheck","timer","undefined","tries","_createClass","key","value","reset","clearTimeout","scheduleTimeout","_this","setTimeout","default"],"sources":["C:\\Users\\deradoi\\udemy\\Crash Course - Build a Full Stack Web App\\today-i-learned\\node_modules\\@supabase\\realtime-js\\src\\lib\\timer.ts"],"sourcesContent":["/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n  timer: number | undefined = undefined\n  tries: number = 0\n\n  constructor(public callback: Function, public timerCalc: Function) {\n    this.callback = callback\n    this.timerCalc = timerCalc\n  }\n\n  reset() {\n    this.tries = 0\n    clearTimeout(this.timer)\n  }\n\n  // Cancels any previous scheduleTimeout and schedules callback\n  scheduleTimeout() {\n    clearTimeout(this.timer)\n\n    this.timer = <any>setTimeout(() => {\n      this.tries = this.tries + 1\n      this.callback()\n    }, this.timerCalc(this.tries + 1))\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;AAAA,IAYqBA,KAAK;EAIxB,SAAAA,MAAmBC,QAAkB,EAASC,SAAmB;IAAAC,eAAA,OAAAH,KAAA;IAA9C,KAAAC,QAAQ,GAARA,QAAQ;IAAmB,KAAAC,SAAS,GAATA,SAAS;IAHvD,KAAAE,KAAK,GAAuBC,SAAS;IACrC,KAAAC,KAAK,GAAW,CAAC;IAGf,IAAI,CAACL,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC5B;EAACK,YAAA,CAAAP,KAAA;IAAAQ,GAAA;IAAAC,KAAA,EAED,SAAAC,MAAA,EAAK;MACH,IAAI,CAACJ,KAAK,GAAG,CAAC;MACdK,YAAY,CAAC,IAAI,CAACP,KAAK,CAAC;IAC1B;IAEA;EAAA;IAAAI,GAAA;IAAAC,KAAA,EACA,SAAAG,gBAAA,EAAe;MAAA,IAAAC,KAAA;MACbF,YAAY,CAAC,IAAI,CAACP,KAAK,CAAC;MAExB,IAAI,CAACA,KAAK,GAAQU,UAAU,CAAC,YAAK;QAChCD,KAAI,CAACP,KAAK,GAAGO,KAAI,CAACP,KAAK,GAAG,CAAC;QAC3BO,KAAI,CAACZ,QAAQ,EAAE;MACjB,CAAC,EAAE,IAAI,CAACC,SAAS,CAAC,IAAI,CAACI,KAAK,GAAG,CAAC,CAAC,CAAC;IACpC;EAAC;EAAA,OAAAN,KAAA;AAAA;AAAA,SAtBkBA,KAAK,IAAAe,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}