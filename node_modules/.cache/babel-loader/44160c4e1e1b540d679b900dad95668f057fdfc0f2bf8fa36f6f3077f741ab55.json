{"ast":null,"code":"import SupabaseClient from './SupabaseClient';\nexport * from '@supabase/gotrue-js';\nexport { FunctionsHttpError, FunctionsFetchError, FunctionsRelayError, FunctionsError } from '@supabase/functions-js';\nexport * from '@supabase/realtime-js';\nexport { default as SupabaseClient } from './SupabaseClient';\n/**\n * Creates a new Supabase Client.\n */\nexport var createClient = function createClient(supabaseUrl, supabaseKey, options) {\n  return new SupabaseClient(supabaseUrl, supabaseKey, options);\n};","map":{"version":3,"names":["SupabaseClient","FunctionsHttpError","FunctionsFetchError","FunctionsRelayError","FunctionsError","default","createClient","supabaseUrl","supabaseKey","options"],"sources":["C:\\Users\\deradoi\\udemy\\Crash Course - Build a Full Stack Web App\\today-i-learned\\node_modules\\@supabase\\supabase-js\\src\\index.ts"],"sourcesContent":["import SupabaseClient from './SupabaseClient'\nimport type { GenericSchema, SupabaseClientOptions } from './lib/types'\n\nexport * from '@supabase/gotrue-js'\nexport type { User as AuthUser, Session as AuthSession } from '@supabase/gotrue-js'\nexport type {\n  PostgrestResponse,\n  PostgrestSingleResponse,\n  PostgrestMaybeSingleResponse,\n  PostgrestError,\n} from '@supabase/postgrest-js'\nexport {\n  FunctionsHttpError,\n  FunctionsFetchError,\n  FunctionsRelayError,\n  FunctionsError,\n} from '@supabase/functions-js'\nexport * from '@supabase/realtime-js'\nexport { default as SupabaseClient } from './SupabaseClient'\nexport type { SupabaseClientOptions } from './lib/types'\n\n/**\n * Creates a new Supabase Client.\n */\nexport const createClient = <\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n>(\n  supabaseUrl: string,\n  supabaseKey: string,\n  options?: SupabaseClientOptions<SchemaName>\n): SupabaseClient<Database, SchemaName, Schema> => {\n  return new SupabaseClient(supabaseUrl, supabaseKey, options)\n}\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,kBAAkB;AAG7C,cAAc,qBAAqB;AAQnC,SACEC,kBAAkB,EAClBC,mBAAmB,EACnBC,mBAAmB,EACnBC,cAAc,QACT,wBAAwB;AAC/B,cAAc,uBAAuB;AACrC,SAASC,OAAO,IAAIL,cAAc,QAAQ,kBAAkB;AAG5D;;;AAGA,OAAO,IAAMM,YAAY,GAAG,SAAfA,YAAYA,CASvBC,WAAmB,EACnBC,WAAmB,EACnBC,OAA2C,EACK;EAChD,OAAO,IAAIT,cAAc,CAACO,WAAW,EAAEC,WAAW,EAAEC,OAAO,CAAC;AAC9D,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}